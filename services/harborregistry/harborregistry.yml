apiVersion: v1
kind: Template
metadata:
  name: harborregistry-template
  annotations:
    description: "A template for generating Harbor's registry service"
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOOBERNETES_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: HARBORREGISTRY_SERVICE_IMAGE
    description: Pullable image of registry service
    required: true
  - name: HARBORREGISTRYCTL_SERVICE_IMAGE
    description: Pullable image of registryctl service
    required: true
  - name: HARBORREGISTRY_SERVICE_NAME
    description: Pullable image of registry service
    value: harborregistry
  - name: HARBORREGISTRYCTL_SERVICE_NAME
    description: Pullable image of registryctl service
    value: harborregistryctl
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${SERVICE_NAME} # harborregistry
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  type: Opaque
  data:
    REGISTRY_REDIS_PASSWORD: ""
    #REGISTRY_STORAGE_S3_ACCESSKEY: "" # Will be stored in the Lagoobernetes API
    #REGISTRY_STORAGE_S3_SECRETKEY: "" # Will be stored in the Lagoobernetes API
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${SERVICE_NAME} # harborregistry
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  data:
    config.yml: |
      version: 0.1
      log:
        level: error
        fields:
          service: registry
      storage:
        s3:
          region: $HARBOR_REGISTRY_STORAGE_AMAZON_REGION
          bucket: $HARBOR_REGISTRY_STORAGE_AMAZON_BUCKET
        cache:
          layerinfo: redis
        maintenance:
          uploadpurging:
            enabled: false
        delete:
          enabled: true
        redirect:
          disable: false
      redis:
        addr: "harbor-redis:6379"
        db: 2
      http:
        addr: :5000
        relativeurls: true
        # set via environment variable
        # secret: placeholder
        debug:
          addr: localhost:5001
      auth:
        token:
          issuer: harbor-token-issuer
          realm: "$HARBOR_NGINX_ENDPOINT/service/token"
          rootcertbundle: /etc/registry/root.crt
          service: harbor-registry
      validation:
        disabled: true
      notifications:
        endpoints:
          - name: harbor
            disabled: false
            url: http://harbor-core/service/notifications
            timeout: 3000ms
            threshold: 5
            backoff: 1s
            ignoredmediatypes:
              - application/vnd.docker.image.rootfs.diff.tar.gzip
              - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
              - application/vnd.oci.image.layer.v1.tar
              - application/vnd.oci.image.layer.v1.tar+gzip
              - application/vnd.oci.image.layer.v1.tar+zstd
              - application/vnd.oci.image.layer.nondistributable.v1.tar
              - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
              - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
              - application/octet-stream
    ctl-config.yml: |
      ---
      protocol: "http"
      port: 8080
      log_level: error
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME} # harborregistry
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    ports:
      - name: registry
        port: 5000
      - name: controller
        port: 8080
    selector:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${SERVICE_NAME} # harborregistry
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    replicas: 1
    selector:
      matchLabels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        containers:
        - name: ${HARBORREGISTRY_SERVICE_NAME}
          image: ${HARBORREGISTRY_SERVICE_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
          - secretRef:
              name: ${SERVICE_NAME} # harborregistry
          - configMapRef:
              name: "lagoobernetes-env"
          ports:
          - containerPort: 5000
          - containerPort: 5001
          volumeMounts:
          - name: registry-data
            mountPath: /storage
            subPath:
          - name: registry-root-certificate
            mountPath: /etc/registry/root.crt
            subPath: tls.crt
          - name: registry-config
            mountPath: /etc/registry/pre_config.yml
            subPath: config.yml
        - name: ${HARBORREGISTRYCTL_SERVICE_NAME}
          image: ${HARBORREGISTRYCTL_SERVICE_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
          - secretRef:
              name: ${SERVICE_NAME} # harborregistry
          - configMapRef:
              name: "lagoobernetes-env"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core-secret
                  key: HARBOR_CORE_SECRET
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-jobservice-secret
                  key: HARBOR_JOBSERVICE_SECRET
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: harborregistry-secret
                  key: HARBOR_REGISTRY_SECRET
          ports:
          - containerPort: 8080
          volumeMounts:
          - name: registry-data
            mountPath: /storage
            subPath:
          - name: registry-config
            mountPath: /etc/registry/pre_config.yml
            subPath: config.yml
          - name: registry-config
            mountPath: /etc/registryctl/config.yml
            subPath: ctl-config.yml
        volumes:
        - name: registry-root-certificate
          configMap:
            name: harbor-core
        - name: registry-config
          configMap:
            name: "harborregistry"
        - name: registry-data
          emptyDir: {}
