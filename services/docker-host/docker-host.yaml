apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: lagoobernetes-docker-host
parameters:
  - name: REPOSITORY_TO_UPDATE
    description: Repository(ies) that should be updated by the cronjob - use a pipe '|' to separate multiples
    value: amazeeio
  - name: SERVICE_NAME
    description: Name of this service
    value: docker-host
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    value: master
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    value: lagoobernetes
  - name: BRANCH
    description: Which branch this belongs to, original value
    value: master
  - name: PROJECT
    description: Which project this belongs to, original value
    value: master
  - name: LAGOOBERNETES_GIT_SHA
    description: git hash sha of the current deployment
    value: '0000000000000000000000000000000000000000'
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    value: lagoobernetes
  - name: REGISTRY
    description: Registry where Images are pushed to
    value: ""
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Recreate"
  - name: SERVICE_IMAGE
    description: Pullable image of service
    value: amazeeio/docker-host:latest
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
    strategy:
      type: ${DEPLOYMENT_STRATEGY}
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        containers:
        - image: ${SERVICE_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 2375
            timeoutSeconds: 1
          name: ${SERVICE_NAME}
          env:
            - name: DOCKER_HOST
              value: localhost
            - name: REPOSITORY_TO_UPDATE
              value: ${REPOSITORY_TO_UPDATE}
            - name: CRONJOBS
              value: |
                22 1 * * * /lagoobernetes/cronjob.sh "/prune-images.sh"
                22 */4 * * * /lagoobernetes/cronjob.sh "/remove-exited.sh"
                */15 * * * * /lagoobernetes/cronjob.sh "/update-push-images.sh"
          ports:
          - containerPort: 2375
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 2375
            timeoutSeconds: 1
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /var/lib/docker
            name: docker-lib
        restartPolicy: Always
        serviceAccount: docker-host
        serviceAccountName: docker-host
        volumes:
        - name: docker-lib
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - port: 2375
      protocol: TCP
      targetPort: 2375
    selector:
      service: ${SERVICE_NAME}
