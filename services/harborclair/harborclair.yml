apiVersion: v1
kind: Template
metadata:
  name: harbor-claire-template
  annotations:
    description: "A template for generating Harbor's claire service"
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOOBERNETES_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: HARBORCLAIR_SERVICE_IMAGE
    description: Pullable image of clair service
    required: true
  - name: HARBORCLAIRADAPTER_SERVICE_IMAGE
    description: Pullable image of clair adapter service
    required: true
  - name: HARBORCLAIR_SERVICE_NAME
    description: Name of clair service
    value: harborclair
  - name: HARBORCLAIRADAPTER_SERVICE_NAME
    description: Name of clair adapter service
    value: harborclairadapter
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME} # harborclair
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    ports:
      - name: clair
        port: 6060
      - name: health
        port: 6061
      - name: adapter
        port: 8080
    selector:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${SERVICE_NAME} # harborclair
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    replicas: 1
    selector:
      matchLabels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        containers:
        - name: ${HARBORCLAIR_SERVICE_NAME} # harborclair
          image: ${HARBORCLAIR_SERVICE_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 30
            periodSeconds: 10
          args: ["-log-level", "error"]
          envFrom:
          - configMapRef:
              name: "lagoobernetes-env"
          env:
          - name: HTTP_PROXY
            value: ""
          - name: HTTPS_PROXY
            value: ""
          - name: NO_PROXY
            value: "harbor-core,harbor-jobservice,harbor-database,harborclair,harborclairadapter,harborregistry,harbor-portal,127.0.0.1,localhost,.local,.internal"
          - name: CLAIR_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: clair-db-password
                key: CLAIR_DB_PASSWORD
          ports:
          - containerPort: 6060
          volumeMounts:
          - name: config
            mountPath: /etc/clair/config.yaml
            subPath: config.yaml
        - name: ${HARBORCLAIRADAPTER_SERVICE_NAME} # harborclairadapter
          image: ${HARBORCLAIRADAPTER_SERVICE_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /probe/healthy
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /probe/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
          - name: SCANNER_CLAIR_URL
            # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
            value: "http://127.0.0.1:6060"
          - name: SCANNER_STORE_REDIS_URL
            valueFrom:
              configMapKeyRef:
                name: ${SERVICE_NAME}
                key: redis
          - name: SCANNER_CLAIR_DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: ${SERVICE_NAME}
                key: database
          - name: SCANNER_LOG_LEVEL
            value: "error"
        volumes:
        - name: config
          configMap:
            name: ${SERVICE_NAME}
