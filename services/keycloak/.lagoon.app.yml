apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: lagoobernetes-openshift-template-keycloak
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOOBERNETES_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ''
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: 'Rolling'
  - name: SERVICE_IMAGE
    description: Pullable image of service
    required: true
  - name: CRONJOBS
    description: Oneliner of Cronjobs
    value: ''
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      labels:
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
      name: ${SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        service: ${SERVICE_NAME}
      strategy:
        type: ${DEPLOYMENT_STRATEGY}
      template:
        metadata:
          creationTimestamp: null
          labels:
            service: ${SERVICE_NAME}
            branch: ${SAFE_BRANCH}
            project: ${SAFE_PROJECT}
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: service
                        operator: In
                        values:
                          - ${SERVICE_NAME}
                  topologyKey: kubernetes.io/hostname
          containers:
            - image: ${SERVICE_IMAGE}
              name: ${SERVICE_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                tcpSocket:
                  port: 8080
                initialDelaySeconds: 180
                timeoutSeconds: 1
              livenessProbe:
                httpGet:
                  port: 8080
                initialDelaySeconds: 240
              envFrom:
                - configMapRef:
                    name: lagoobernetes-env
              env:
                - name: KEYCLOAK_LAGOOBERNETES_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-lagoobernetes-admin-password
                      key: KEYCLOAK_LAGOOBERNETES_ADMIN_PASSWORD
                - name: KEYCLOAK_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-admin-password
                      key: KEYCLOAK_ADMIN_PASSWORD
                - name: KEYCLOAK_API_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-api-client-secret
                      key: KEYCLOAK_API_CLIENT_SECRET
                - name: KEYCLOAK_AUTH_SERVER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-auth-server-client-secret
                      key: KEYCLOAK_AUTH_SERVER_CLIENT_SECRET
                - name: SERVICE_NAME
                  value: ${SERVICE_NAME}
                - name: CRONJOBS
                  value: ${CRONJOBS}
                - name: JGROUPS_DISCOVERY_PROTOCOL
                  value: dns.DNS_PING
                - name: JGROUPS_DISCOVERY_PROPERTIES
                  value: dns_query=${SERVICE_NAME}-headless
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
      test: false
      triggers:
        - type: ConfigChange
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
      name: ${SERVICE_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        service: ${SERVICE_NAME}
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Route
    metadata:
      creationTimestamp: null
      labels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
      name: ${SERVICE_NAME}
    spec:
      host: ${SERVICE_ROUTER_URL}
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
      name: ${SERVICE_NAME}-headless
    spec:
      clusterIP: None
      ports:
        - name: 7600-tcp
          port: 7600
          protocol: TCP
          targetPort: 7600
      selector:
        service: ${SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
